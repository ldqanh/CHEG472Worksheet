# -*- coding: utf-8 -*-
"""Anh_Lab2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-VJDzN71EoTkNmmffDAZW4ZphRtMuYUZ
"""

import pandas as pd
from google.colab import files

#upload the file
uploaded = files.upload()

#load the dataset
file_name = "Biomass Gasification Dataset.xlsx"
df = pd.read_excel(file_name)

#display the first few rows
df.head()

num_rows, num_cols = df.shape

print("Number of rows:", num_rows)
print("Number of columns:", num_cols)

# The dataset has 244 rows and 25 columns

# Assuming you have a DataFrame named 'df'

# Get data types of all columns
data_types = df.dtypes

# Print data types
print(data_types)

# Get numeric columns
numeric_columns = df.select_dtypes(include=['number']).columns

# Get categorical columns
categorical_columns = df.select_dtypes(include=['object']).columns

print("Numeric columns:", numeric_columns)
print("Categorical columns:", categorical_columns)

import pandas as pd

# Assuming your DataFrame is named 'df'
missing_values = df.isnull().sum()

print(missing_values)

# There are no missing values

import pandas as pd

# Assuming 'biomass_type' is the column containing biomass feed types
biomass_feed_types = df['Type of Feed'].unique()

print("Biomass Feed Types:")
print(biomass_feed_types)

import pandas as pd
import matplotlib.pyplot as plt

# Assuming 'Feed Type' is the column for feed types and 'C', 'H', 'N', 'S', 'O', 'ASH' are the elemental composition columns

# Group data by feed type
grouped_data = df.groupby('Type of Feed')

# Calculate summary statistics
summary_stats = grouped_data[['C', 'H', 'N', 'S', 'O', 'ASH']].describe()

# Print summary statistics
print(summary_stats)

# Create box plots
grouped_data.boxplot(column=['C', 'H', 'N', 'S', 'O', 'ASH'], by='Type of Feed')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt


# Group data by feed type
grouped_data = df.groupby('Type of Feed')

# Calculate the mean for each elemental composition
mean_values = grouped_data[['C', 'H', 'N', 'S', 'O', 'ASH']].mean()

# Create a bar chart
mean_values.plot(kind='bar')

# Add labels and title
plt.xlabel('Elemental Composition')
plt.ylabel('Mean Value')
plt.title('Comparison of Elemental Composition Across Feed Types')

# Show the plot
plt.show()

import pandas as pd

# Create new columns for carbon-to-hydrogen and oxygen-to-hydrogen ratios
df['C/H'] = df['C'] / df['H']
df['O/H'] = df['O'] / df['H']

import matplotlib.pyplot as plt

# Create a scatter plot
plt.scatter(df['C/H'], df['O/H'], c=df['Type of Feed'].astype('category').cat.codes)

# Add labels and title
plt.xlabel('Carbon-to-Hydrogen Ratio')
plt.ylabel('Oxygen-to-Hydrogen Ratio')
plt.title('Relationship Between C/H and O/H Ratios by Feed Type')

# Add legend
plt.legend(title='Type of Feed', labels=df['Type of Feed'].unique())

# Show the plot
plt.show()

import pandas as pd

# Perform one-hot encoding on the 'Feed Type' column
df = pd.get_dummies(df, columns=['Type of Feed'])

import pandas as pd

# Get a list of columns that start with 'Type of Feed_'
new_columns = [col for col in df.columns if col.startswith('Type of Feed_')]

# Calculate the number of new columns
num_new_columns = len(new_columns)

print("Number of new columns:", num_new_columns)

import pandas as pd
import numpy as np

# Calculate Z-scores
df['CO mole fraction z'] = (df['CO mole fraction'] - df['CO mole fraction'].mean()) / df['CO mole fraction'].std()
df['H2 mole fraction z'] = (df['H2 mole fraction'] - df['H2 mole fraction'].mean()) / df['H2 mole fraction'].std()
df['CO2 mole fraction z'] = (df['CO2 mole fraction'] - df['CO2 mole fraction'].mean()) / df['CO2 mole fraction'].std()

# Identify outliers based on Z-scores (e.g., Z-score > 3 or < -3)
outliers = df[(df['CO mole fraction z'] > 3) | (df['CO mole fraction z'] < -3) |
              (df['H2 mole fraction z'] > 3) | (df['H2 mole fraction z'] < -3) |
              (df['CO2 mole fraction z'] > 3) | (df['CO2 mole fraction z'] < -3)]

# Handle outliers (e.g., remove or replace)
# ...

import pandas as pd

outliers = outliers.reset_index(drop=True)  # Reset index and drop the old index column
df = df.drop(outliers.index)

# Cap outliers
threshold = 0.5
df.loc[df['CO mole fraction'] > threshold, 'CO mole fraction'] = threshold

# Impute outliers with the mean
df.loc[df['CO mole fraction'].isna(), 'CO mole fraction'] = df['CO mole fraction'].mean()

# Cap outliers
threshold = 0.5
df.loc[df['CO2 mole fraction'] > threshold, 'CO2 mole fraction'] = threshold

# Impute outliers with the mean
df.loc[df['CO2 mole fraction'].isna(), 'CO2 mole fraction'] = df['CO2 mole fraction'].mean()

threshold = 0.5
df.loc[df['H2 mole fraction'] > threshold, 'H2 mole fraction'] = threshold

# Impute outliers with the mean
df.loc[df['H2 mole fraction'].isna(), 'H2 mole fraction'] = df['H2 mole fraction'].mean()

import pandas as pd

# Group data by feed type
grouped_data = df.groupby('Type of Feed')

# Calculate summary statistics for C/H and O/H ratios
ratio_stats = grouped_data[['C/H', 'O/H']].describe()

# Print summary statistics
print(ratio_stats)

import pandas as pd
import matplotlib.pyplot as plt


# Group data by feed type
grouped_data = df.groupby('Type of Feed')

# Calculate temperature statistics
temperature_stats = grouped_data['Temp'].describe()

# Print temperature statistics
print(temperature_stats)

# Create box plots
grouped_data.boxplot(column='Temp', by='Type of Feed')
plt.show()

# the temperature are mostly at 400 C except for wheat straw feed which has a wider range

print(df.head())

import matplotlib.pyplot as plt

# Assuming 'C_content' and 'hydrogen_selectivity' are the relevant columns

# Create subplots for Carbon Content
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for Carbon Content
plt.hist(df['C'], bins=30, color='blue')
plt.xlabel('Carbon Content')
plt.ylabel('Frequency')
plt.title('Histogram of Carbon Content')

# Box plot for Carbon Content
plt.subplot(1, 2, 2)
plt.boxplot(df['C'])
plt.xlabel('Carbon Content')
plt.ylabel('Value')
plt.title('Box Plot of Carbon Content')

# Create subplots for Hydrogen Selectivity
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for Hydrogen Selectivity
plt.hist(df['Hydrogen selectivity'], bins=30, color='orange')
plt.xlabel('Hydrogen Selectivity')
plt.ylabel('Frequency')
plt.title('Histogram of Hydrogen Selectivity')

# Box plot for Hydrogen Selectivity
plt.subplot(1, 2, 2)
plt.boxplot(df['Hydrogen selectivity'])
plt.xlabel('Hydrogen Selectivity')
plt.ylabel('Value')
plt.title('Box Plot of Hydrogen Selectivity')

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

# Assuming 'CO_mole_fraction' and 'H2_mole_fraction' are the relevant columns

# Create subplots for CO Mole Fraction
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for CO Mole Fraction
plt.hist(df['CO mole fraction'], bins=30, color='blue')
plt.xlabel('CO Mole Fraction')
plt.ylabel('Frequency')
plt.title('Histogram of CO Mole Fraction')

# Box plot for CO Mole Fraction
plt.subplot(1, 2, 2)
plt.boxplot(df['CO mole fraction'])
plt.xlabel('CO Mole Fraction')
plt.ylabel('Value')
plt.title('Box Plot of CO Mole Fraction')

# Create subplots for H2 Mole Fraction
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for H2 Mole Fraction
plt.hist(df['H2 mole fraction'], bins=30, color='orange')
plt.xlabel('H2 Mole Fraction')
plt.ylabel('Frequency')
plt.title('Histogram of H2 Mole Fraction')

# Box plot for H2 Mole Fraction
plt.subplot(1, 2, 2)
plt.boxplot(df['H2 mole fraction'])
plt.xlabel('H2 Mole Fraction')
plt.ylabel('Value')
plt.title('Box Plot of H2 Mole Fraction')

plt.tight_layout()
plt.show()

# Higher CO levels do not correspond to lower H2

import matplotlib.pyplot as plt

# Assuming 'Temperature' and 'CO2_mole_fraction' are the relevant columns

# Create subplots
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for Temperature
plt.hist(df['Temp'], bins=30, color='blue')
plt.xlabel('Temperature')
plt.ylabel('Frequency')
plt.title('Histogram of Temperature')

# Box plot for Temperature
plt.subplot(1, 2, 2)
plt.boxplot(df['Temp'])
plt.xlabel('Temperature')
plt.ylabel('Value')
plt.title('Box Plot of Temperature')

# Create new figure for CO2 Mole Fraction
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)

# Histogram for CO2 Mole Fraction
plt.hist(df['CO2 mole fraction'], bins=30, color='orange')
plt.xlabel('CO2 Mole Fraction')
plt.ylabel('Frequency')
plt.title('Histogram of CO2 Mole Fraction')

# Box plot for CO2 Mole Fraction
plt.subplot(1, 2, 2)
plt.boxplot(df['CO2 mole fraction'])
plt.xlabel('CO2 Mole Fraction')
plt.ylabel('Value')
plt.title('Box Plot of CO2 Mole Fraction')

plt.tight_layout()
plt.show()

# The trend is not visible

import pandas as pd

# Select the target variables
y = df[['CO2 mole fraction', 'H2 mole fraction', 'Hydrogen selectivity', 'CO mole fraction', 'CH4 mole fraction']]

# Select the feature columns (excluding the target variables)
X = df.drop(columns=['C', 'H', 'N', 'S', 'O', 'ASH'])

print("Shape of X:", X.shape)
print("Shape of y:", y.shape)